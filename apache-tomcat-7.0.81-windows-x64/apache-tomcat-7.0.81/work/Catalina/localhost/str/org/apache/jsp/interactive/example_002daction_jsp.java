/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.81
 * Generated at: 2025-03-27 11:39:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.interactive;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class example_002daction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    request.setAttribute("decorator", "none");
    response.setHeader("Cache-Control","no-cache"); //HTTP 1.1
    response.setHeader("Pragma","no-cache"); //HTTP 1.0
    response.setDateHeader ("Expires", 0); //prevents caching at the proxy server

      out.write("\n");
      out.write("<pre style=\"font-style: normal;\">\n");
      out.write("<span class=\"kw\">package</span> org.apache.struts2.showcase.action;\n");
      out.write("\n");
      out.write("<span class=\"kw\">import</span> java.util.Arrays;\n");
      out.write("<span class=\"kw\">import</span> java.util.Date;\n");
      out.write("<span class=\"kw\">import</span> java.util.HashMap;\n");
      out.write("<span class=\"kw\">import</span> java.util.List;\n");
      out.write("<span class=\"kw\">import</span> java.util.Map;\n");
      out.write("\n");
      out.write("<span class=\"kw\">import</span> com.opensymphony.xwork2.ActionSupport;\n");
      out.write("\n");
      out.write("<span class=\"kw\">public class</span> ExampleAction <span class=\"kw\">extends</span> ActionSupport {\n");
      out.write("    <span class=\"kw\">public static final</span> String CONSTANT = \"Struts Rocks!\";\n");
      out.write("        \n");
      out.write("    <span class=\"kw\">public static</span> Date getCurrentDate() {\n");
      out.write("        return new Date();\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    <span class=\"kw\">public</span> String getName() {\n");
      out.write("        return \"John Galt\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> String[] getBands() {\n");
      out.write("        return new String[] { \"Pink Floyd\", \"Metallica\", \"Guns & Roses\" };\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> List&lt;String&gt; getMovies() {\n");
      out.write("        return Arrays.asList(\"Lord of the Rings\", \"Matrix\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> Book getBook() {\n");
      out.write("        <span class=\"kw\">return</span> new Book(\"Iliad\", \"Homer\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> Map&lt;String, Book&gt; getBooks() {\n");
      out.write("        Map&lt;String, Book&gt; books = new HashMap&lt;String, Book&gt;();\n");
      out.write("        books.put(\"Iliad\", new Book(\"Iliad\", \"Homer\"));\n");
      out.write("        books.put(\"The Republic\", new Book(\"The Replublic\", \"Plato\"));\n");
      out.write("        books.put(\"Thus Spake Zarathustra\", new Book(\"Thus Spake Zarathustra\",\n");
      out.write("            \"Friedrich Nietzsche\"));\n");
      out.write("        return books;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("<span class=\"kw\">class</span> Book {\n");
      out.write("    <span class=\"kw\">private</span> String title;\n");
      out.write("    <span class=\"kw\">private</span> String author;\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> Book(String title, String author) {\n");
      out.write("        this.title = title;\n");
      out.write("        this.author = author;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> String getTitle() {\n");
      out.write("        <span class=\"kw\">return</span> title;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public void</span> setTitle(String title) {\n");
      out.write("        this.title = title;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public</span> String getAuthor() {\n");
      out.write("        return author;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    <span class=\"kw\">public void</span> setAuthor(String author) {\n");
      out.write("        this.author = author;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("</pre>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
